/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package fr.wowcompanion.openapi.api;

import fr.wowcompanion.openapi.model.UserRegistrationParameter;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "authentication", description = "the authentication API")
public interface AuthenticationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /authentication/isConnected
     *
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "testConnection",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation")
        },
        security = {
            @SecurityRequirement(name = "oAuthSample", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/authentication/isConnected"
    )
    default ResponseEntity<Void> testConnection(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /authentication/isRegistred
     *
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "testRegistration",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  Boolean.class)))
        },
        security = {
            @SecurityRequirement(name = "oAuthSample", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/authentication/isRegistred",
        produces = { "application/json" }
    )
    default ResponseEntity<Boolean> testRegistration(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /authentication/registration : Register new account
     *
     * @param userRegistrationParameter  (optional)
     * @return successful operation (status code 200)
     */
    @Operation(
        operationId = "userRegistration",
        summary = "Register new account",
        tags = { "Authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation")
        },
        security = {
            @SecurityRequirement(name = "oAuthSample", scopes={  })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/authentication/registration",
        consumes = { "application/json" }
    )
    default ResponseEntity<Void> userRegistration(
        @Parameter(name = "UserRegistrationParameter", description = "", schema = @Schema(description = "")) @Valid @RequestBody(required = false) UserRegistrationParameter userRegistrationParameter
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
